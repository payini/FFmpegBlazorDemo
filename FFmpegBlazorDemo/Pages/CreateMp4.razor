@page "/createMp4"
@using FFmpegBlazor
@inject IJSRuntime Runtime
@using Microsoft.AspNetCore.Components.Forms
@implements IDisposable

<PageTitle>Create Video</PageTitle>

<h1>Create Video</h1>
Create an MP4 video file from a single image, and an audio file. The output video will last the same time as the audio file.
<br />
<br />
<div>
    <label for="imageFile">Image file:</label>
    <InputFile id="imageFile" OnChange="LoadImageFile" />
</div>
<br />
<img width="300" height="200" src="@imageInputUrl" />
<br />
<br />
<div>
    <label for="audioFile">Audio file:</label>
    <InputFile id="audioFile" OnChange="LoadAudioFile" />
</div>
<br />
<audio controls src="@audioInputUrl" />
<br />
<br />
<input type="checkbox" @bind-value="@download" />&nbsp;Download Output File
<br />
<br />
<button class="btn btn-primary" @onclick="Process">Create Video</button>
<br />
<br />
<video width="300" height="200" autoplay controls src="@videoOutputUrl" />
<br />
<br />
<Logger LogMessages="@logMessages" Progress="@progressMessage" Rows="19"/>

@code
{
    FFMPEG? ffMpeg;
    byte[]? audioBuffer;
    byte[]? imageBuffer;
    string? imageInputUrl = string.Empty;
    string? audioInputUrl = string.Empty;
    string videoOutputUrl = string.Empty;
    string logMessages = string.Empty;
    string progressMessage = string.Empty;
    bool download = false;
    const string inputImageFile = "input.png";
    const string inputAudioFile = "input.mp3";
    const string outputFile = "output.mp4";

    protected override void OnInitialized()
    {
        // Wire-up events
        if (FFmpegFactory.Runtime != null)
        {
            FFmpegFactory.Logger += LogToConsole;
            FFmpegFactory.Progress += ProgressChange;
        }
        base.OnInitialized();
    }

    private async void LoadImageFile(InputFileChangeEventArgs i)
    {
        // Clear logs and progress
        logMessages = string.Empty;
        progressMessage = string.Empty;

        // Get first file from input selection
        var file = i.GetMultipleFiles()[0];

        // Read all bytes
        using var stream = file.OpenReadStream(100000000); //Max size for file that can be read
        imageBuffer = new byte[file.Size];

        // Read all bytes
        await stream.ReadAsync(imageBuffer);

        // Create a video link from the buffer, so that video can be played
        imageInputUrl = FFmpegFactory.CreateURLFromBuffer(imageBuffer, inputImageFile, file.ContentType);

        // Rerender DOM
        StateHasChanged();
    }

    private async void LoadAudioFile(InputFileChangeEventArgs a)
    {
        // Get first file from input selection
        var file = a.GetMultipleFiles()[0];

        // Read all bytes
        using var stream = file.OpenReadStream(100000000); //Max size for file that can be read
        audioBuffer = new byte[file.Size];

        // Read all bytes
        await stream.ReadAsync(audioBuffer);

        // Create a video link from the buffer, so that video can be played
        audioInputUrl = FFmpegFactory.CreateURLFromBuffer(audioBuffer, inputAudioFile, file.ContentType);

        // Rerender DOM
        StateHasChanged();
    }

    private async void Process()
    {
        // Create an instance of FFmpeg
        ffMpeg = FFmpegFactory.CreateFFmpeg(new FFmpegConfig() { Log = true });

        // Download all dependencies from the CDN
        await ffMpeg.Load();

        if (!ffMpeg.IsLoaded) return;

        // Write buffer to in-memory files (special emscripten files, FFmpeg only interact with this file)
        ffMpeg.WriteFile(inputImageFile, imageBuffer);
        ffMpeg.WriteFile(inputAudioFile, audioBuffer);

        // Pass CLI argument here equivalent to ffmpeg -i image.png -i sound1.mp3 -r 30 -s 1280x720 -preset ultrafast -crf 25 movie.mp4
        await ffMpeg.Run("-i", inputImageFile, "-i", inputAudioFile, "-r", "30", "-s", "1280x720", "-preset", "ultrafast", "-crf", "25", outputFile);

        // Delete in-memory file
        ffMpeg.UnlinkFile(inputImageFile);
        ffMpeg.UnlinkFile(inputAudioFile);
    }

    private async void ProgressChange(Progress message)
    {
        // Display progress % (0-1)
        // Cap progress as it doesn't always reports (0-1)
        var progressRatio = message.Ratio <= 0 ? 0 : message.Ratio >= 100 ? 1 : message.Ratio;
        progressMessage = $"Progress: {progressRatio.ToString("P2")}";

        Console.WriteLine(progressMessage);
        LogToUi(progressMessage);

        // If FFmpeg processing is complete (generate a media URL so that it can be played or alternatively download that file)
        if (message.Ratio == 1)
        {
            progressMessage = $"Progress: 100%";

            // Get a bufferPointer from C WASM to C#
            var res = await ffMpeg!.ReadFile(outputFile);

            // Generate a URL from the file bufferPointer
            videoOutputUrl = FFmpegFactory.CreateURLFromBuffer(res, outputFile, "video/mp4");

            // Download the file
            if (download)
            { 
                FFmpegFactory.DownloadBufferAsFile(res, outputFile, "video/mp4");
            }

            // Rerender DOM
            StateHasChanged();
        }
    }

    private void LogToConsole(Logs message)
    {
        var logMessage = $"{message.Type} {message.Message}";
        Console.WriteLine(logMessage);
        LogToUi(logMessage);
    }

    private void LogToUi(string message)
    {
        logMessages += $"{message}\r\n";
        // Rerender DOM
        StateHasChanged();
    }

    public void Dispose()
    {
        FFmpegFactory.Logger -= LogToConsole;
        FFmpegFactory.Progress -= ProgressChange;
    }
}